// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hapi/release/watch_feed.proto

package release

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogLine struct {
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Data      string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *LogLine) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *LogLine) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type JobLogChunk struct {
	JobName       string     `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	PodName       string     `protobuf:"bytes,2,opt,name=pod_name,json=podName" json:"pod_name,omitempty"`
	ContainerName string     `protobuf:"bytes,3,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	LogLines      []*LogLine `protobuf:"bytes,4,rep,name=log_lines,json=logLines" json:"log_lines,omitempty"`
}

func (m *JobLogChunk) Reset()                    { *m = JobLogChunk{} }
func (m *JobLogChunk) String() string            { return proto.CompactTextString(m) }
func (*JobLogChunk) ProtoMessage()               {}
func (*JobLogChunk) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *JobLogChunk) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *JobLogChunk) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobLogChunk) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *JobLogChunk) GetLogLines() []*LogLine {
	if m != nil {
		return m.LogLines
	}
	return nil
}

type JobPodError struct {
	JobName       string `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	PodName       string `protobuf:"bytes,2,opt,name=pod_name,json=podName" json:"pod_name,omitempty"`
	ContainerName string `protobuf:"bytes,3,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	Message       string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *JobPodError) Reset()                    { *m = JobPodError{} }
func (m *JobPodError) String() string            { return proto.CompactTextString(m) }
func (*JobPodError) ProtoMessage()               {}
func (*JobPodError) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *JobPodError) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *JobPodError) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JobPodError) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *JobPodError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type WatchFeed struct {
	JobLogChunk *JobLogChunk `protobuf:"bytes,1,opt,name=job_log_chunk,json=jobLogChunk" json:"job_log_chunk,omitempty"`
	JobPodError *JobPodError `protobuf:"bytes,2,opt,name=job_pod_error,json=jobPodError" json:"job_pod_error,omitempty"`
}

func (m *WatchFeed) Reset()                    { *m = WatchFeed{} }
func (m *WatchFeed) String() string            { return proto.CompactTextString(m) }
func (*WatchFeed) ProtoMessage()               {}
func (*WatchFeed) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *WatchFeed) GetJobLogChunk() *JobLogChunk {
	if m != nil {
		return m.JobLogChunk
	}
	return nil
}

func (m *WatchFeed) GetJobPodError() *JobPodError {
	if m != nil {
		return m.JobPodError
	}
	return nil
}

func init() {
	proto.RegisterType((*LogLine)(nil), "hapi.release.LogLine")
	proto.RegisterType((*JobLogChunk)(nil), "hapi.release.JobLogChunk")
	proto.RegisterType((*JobPodError)(nil), "hapi.release.JobPodError")
	proto.RegisterType((*WatchFeed)(nil), "hapi.release.WatchFeed")
}

func init() { proto.RegisterFile("hapi/release/watch_feed.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0x25, 0xbf, 0x96, 0x5f, 0x9a, 0x8d, 0xf5, 0xb0, 0x20, 0xa4, 0xa0, 0x50, 0x02, 0x42, 0x4f,
	0x29, 0xd4, 0xa3, 0x78, 0x51, 0xf4, 0x20, 0x45, 0xa4, 0x17, 0xc1, 0x4b, 0xd8, 0x64, 0xc7, 0xfc,
	0x31, 0xd9, 0x09, 0xbb, 0x2b, 0x7e, 0x01, 0x2f, 0x7e, 0x09, 0x3f, 0xab, 0xec, 0x9f, 0x6a, 0x04,
	0xaf, 0xde, 0x66, 0xe6, 0xbd, 0x19, 0xde, 0x7b, 0xbb, 0xe4, 0xa4, 0x66, 0x43, 0xb3, 0x96, 0xd0,
	0x01, 0x53, 0xb0, 0x7e, 0x65, 0xba, 0xac, 0xf3, 0x27, 0x00, 0x9e, 0x0d, 0x12, 0x35, 0xd2, 0x03,
	0x03, 0x67, 0x1e, 0x4e, 0xcf, 0x49, 0xb8, 0xc5, 0x6a, 0xdb, 0x08, 0xa0, 0xc7, 0x24, 0xd2, 0x4d,
	0x0f, 0x4a, 0xb3, 0x7e, 0x48, 0x82, 0x65, 0xb0, 0x8a, 0x76, 0xdf, 0x03, 0x4a, 0xc9, 0x94, 0x33,
	0xcd, 0x92, 0x7f, 0x16, 0xb0, 0x75, 0xfa, 0x11, 0x90, 0xf8, 0x16, 0x8b, 0x2d, 0x56, 0x57, 0xf5,
	0x8b, 0x78, 0xa6, 0x0b, 0x32, 0x6b, 0xb1, 0xc8, 0x05, 0xeb, 0xc1, 0x1f, 0x08, 0x5b, 0x2c, 0xee,
	0x58, 0x0f, 0x06, 0x1a, 0x90, 0x3b, 0xc8, 0x9d, 0x08, 0x07, 0xe4, 0x16, 0x3a, 0x25, 0x87, 0x25,
	0x0a, 0xcd, 0x1a, 0x01, 0xd2, 0x11, 0x26, 0x96, 0x30, 0xff, 0x9a, 0x5a, 0xda, 0x86, 0x44, 0x1d,
	0x56, 0x79, 0xd7, 0x08, 0x50, 0xc9, 0x74, 0x39, 0x59, 0xc5, 0x9b, 0xa3, 0x6c, 0xec, 0x25, 0xf3,
	0x46, 0x76, 0xb3, 0xce, 0x15, 0x2a, 0x7d, 0x73, 0x02, 0xef, 0x91, 0x5f, 0x4b, 0x89, 0xf2, 0x6f,
	0x05, 0x26, 0x24, 0xec, 0x41, 0x29, 0x56, 0x41, 0x32, 0x75, 0x07, 0x7c, 0x9b, 0xbe, 0x07, 0x24,
	0x7a, 0x30, 0xef, 0x70, 0x03, 0xc0, 0xe9, 0x05, 0x99, 0x1b, 0x11, 0xc6, 0x4c, 0x69, 0x62, 0xb3,
	0x4a, 0xe2, 0xcd, 0xe2, 0xa7, 0x99, 0x51, 0xae, 0xbb, 0xb8, 0x1d, 0x85, 0xec, 0xd7, 0x8d, 0x58,
	0x30, 0xa6, 0xac, 0xda, 0xdf, 0xd6, 0xf7, 0xae, 0xed, 0xfa, 0xbe, 0xb9, 0x8c, 0x1e, 0x43, 0xcf,
	0x29, 0xfe, 0xdb, 0x0f, 0x71, 0xf6, 0x19, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x73, 0x41, 0xa7, 0x31,
	0x02, 0x00, 0x00,
}
